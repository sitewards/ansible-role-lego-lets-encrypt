---

- name: "Check if certificates exist or not"
  ansible.builtin.stat:
    path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name }}.crt"
  register: lets_encrypt_resource_stat_result

- name: "Gather certificate information"
  community.crypto.x509_certificate_info:
    path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name }}.crt"
  register: lets_encrypt_resource_info

- name: "Check if the certificate is still valid and generated by lets encrypt"
  ansible.builtin.set_fact:
    lets_encrypt_resource_validity_check_failed: "{{ true if (( lets_encrypt_resource_info.issuer.organizationName != \"Let's Encrypt\" ) or ( lets_encrypt_resource_info.expired )) else false }}"

- name: "Remove wrong/expired cert"
  ansible.builtin.file:
    path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name }}.crt"
    state: absent
  when:
    - lets_encrypt_resource is not skipped
    - lets_encrypt_resource_stat_result.stat.exists == true
    - lets_encrypt_resource_validity_check_failed == true

- name: "Create certificates"
  ansible.builtin.shell: "{{ lets_encrypt_additional_env | default('') }} lego \
        --email='{{ lets_encrypt_account_email }}' \
        --csr='{{ lets_encrypt_directory_path }}/requests/{{ lets_encrypt_resource.common_name }}.csr' \
        --path='{{ lets_encrypt_directory_path }}' \
        --server='{{ lets_encrypt_server }}' \
        --filename='{{ lets_encrypt_resource.common_name }}' \
        {% if lets_encrypt_resource.challenge == 'dns' %}--dns='{{ lets_encrypt_resource.provider }}'{% endif %} \
        {% if lets_encrypt_resource.challenge == 'http' %}--http --http.webroot='{{ lets_encrypt_resource.webroot }}'{% endif %} \
        -a \
        run \
        {% if lets_encrypt_resource.preferred_chain is defined %}--preferred-chain='{{ lets_encrypt_resource.preferred_chain }}'{% endif %}"
  when:
    - lets_encrypt_resource is not skipped
    - ( lets_encrypt_resource_stat_result.stat.exists == false ) or ( lets_encrypt_resource_validity_check_failed == true )
