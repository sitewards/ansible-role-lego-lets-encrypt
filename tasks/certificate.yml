---

- name: "Check if certificates exist or not"
  stat:
    path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name }}.crt"
  register: lets_encrypt_resource_stat_result

- name: "Check if a certificate is currently still valid and generated by lets encrypt"
  openssl_certificate:
    path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name }}.crt"
    provider: assertonly
    issuer:
      O: "Let's Encrypt"
    has_expired: False
  ignore_errors: True
  register: lets_encrypt_ressource_validity_check

- name: "Remove wrong/expired cert"
  file:
    path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name }}.crt"
    state: absent
  when:
    - lets_encrypt_resource is not skipped
    - lets_encrypt_resource_stat_result.stat.exists == true
    - lets_encrypt_ressource_validity_check.failed

- name: "Create certificates"
  shell: "{{ lets_encrypt_additional_env | default('') }} lego \
        --email='{{ lets_encrypt_account_email }}' \
        --csr='{{ lets_encrypt_directory_path }}/requests/{{ lets_encrypt_resource.common_name }}.csr' \
        --path='{{ lets_encrypt_directory_path }}' \
        --server='{{ lets_encrypt_server }}' \
        --filename='{{ lets_encrypt_resource.common_name }}' \
        {% if lets_encrypt_resource.challenge == 'dns' %}--dns='{{ lets_encrypt_resource.provider }}'{% endif %} \
        {% if lets_encrypt_resource.challenge == 'http' %}--http --http.webroot='{{ lets_encrypt_resource.webroot }}'{% endif %} \
        {% if lets_encrypt_resource.preferred_chain is defined %}--preferred-chain='{{ lets_encrypt_resource.preferred_chain }}'{% endif %} \
        -a
        run"
  when:
    - lets_encrypt_resource is not skipped
    - ( lets_encrypt_resource_stat_result.stat.exists == false ) or ( lets_encrypt_ressource_validity_check.failed )
